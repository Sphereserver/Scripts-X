//****************************************************************************
// SphereServer by: SphereServer development team and Menasoft.
// www.sphereserver.net
//****************************************************************************
VERSION=X1
//
// SCRIPT CREDITS
// --------------
// pyromapes2k - Base crafting system used in here
// coruja - Updated to be more OSI compatible
// ShiryuX - Updated to the scriptpack and tweaked many parts of it
// Raylde - Update for work with dynamic configuration instead of create new ITEMDEF for each craftable item
//
// SCRIPT DOCUMENTATION
// --------------------
// OSI Crafting System

[FUNCTION f_craftskill]
if strcmp("<argv[0]>","<ctag.craft.skill>")
   ctag.craft.last
   ctag.craft.page.sidebar
   ctag.craft.sidebar = 01
endif
ctag.craft.skill=<argv[0]>
if !(<ctag0.craft.mark>) && (<def0.<ctag0.craft.skill>_marking>)
   ctag.craft.mark=2
endif
f_resenddialog d_craft_menu


[FUNCTION f_craft]
//<args> = Item ID need to be craft
local.recipe = <getargv 3 <ctag0.craft.item.options>>
if <local.recipe> == 1
   if !<tag0.recipe.<serv.itemdef.<ctag0.craft.item>.baseid>>
      ctag.craft.message = <def.scp.craft_msg_norecipe>
      f_resenddialog d_craft_menu
      return 1
   endif
endif
if <account.resdisp> < <getargv 4 <ctag0.craft.item.options>>
   ctag.craft.message = <def.scp.craft_msg_noexpansion>
   f_resenddialog d_craft_menu
   return 1
endif

// if the first material is different from base, then we need to use MATOVERRIDE
//TODO: need to clean this matoverride stuff
IF (<def.<ctag0.craft.skill>_material_<dctag.craft.material.<ctag.craft.skill>>_resourceid> != <SERV.ITEMDEF.<args>.RESOURCES.1.KEY.NAME>)
    TAG.MATOVERRIDE_<def.<ctag0.craft.skill>_resourceid> = <def.<ctag0.craft.skill>_material_<dctag.craft.material.<ctag.craft.skill>>_resourceid>
ENDIF

if !<canmakeskill <args>>
   ctag.craft.message = <def.scp.craft_msg_noskill>
   f_resenddialog d_craft_menu
   return 1
elif !<canmake  <args>>
   ctag.craft.message = <def.scp.craft_msg_noresources>
   f_resenddialog d_craft_menu
   return 1
elif !<isempty <def.<ctag0.craft.skill>_check>>
   if (<<def.<ctag0.craft.skill>_check> <args>>)
      f_resenddialog d_craft_menu
      return 1
   endif
endif
makeitem <args>
f_craftsuccesschance <args>
ctag.craft.message = "Creating <serv.itemdef.<args>.name>..."
ctag.craft.last.<ctag0.craft.skill> = <args>
if !strcmpi("Cooking","<ctag0.craft.skill>")
   timerf <eval <serv.skill.13.delay>/10>,craftcooking <args>,<actdiff> // Cooking Fix
endif
LOCAL.NewLastTen=<args>
for 0 9
   LOCAL.TempItem=<getargv <LOCAL._for> <TAG0.craft.lastTen.<ctag0.craft.skill>>>
   IF (<LOCAL.TempItem>) && !(STRMATCH(*<LOCAL.TempItem>*,<LOCAL.NewLastTen>))
      LOCAL.NewLastTen=<LOCAL.NewLastTen>,<LOCAL.TempItem>
   ENDIF
endfor


[FUNCTION f_craftcooking]
if (<canmake <argv[0]>>) && (<argv[1]> > 0)
   serv.newitem <argv[0]>
   consume <new.resources>
   new.bounce
   ctag.craft.message = <def.scp.craft_msg_success>
   skillgain cooking <r2>
else
   ctag.craft.message = <def.scp.craft_msg_fail>
endif
f_craftskill cooking

[FUNCTION f_canmake]
//<args> = Item ID need to be craft
FOR 1 <SERV.ITEMDEF.<args>.RESOURCES.COUNT>
	// set the resource_name we can use to check the resource
	LOCAL.RESOURCE_NAME=<SERV.ITEMDEF.<args>.RESOURCES.<dlocal._for>.KEY.NAME>

	//if is different from base, then we need to check the resource
	IF (!<ISEMPTY <def.<ctag0.craft.skill>_material_<dctag.craft.material.<ctag.craft.skill>>_resourceid>> && <def.<ctag0.craft.skill>_material_<dctag.craft.material.<ctag.craft.skill>>_resourceid> != <LOCAL.RESOURCE_NAME> )
		LOCAL.RESOURCE_NAME=<def.<ctag0.craft.skill>_material_<dctag.craft.material.<ctag.craft.skill>>_resourceid>
	ENDIF

	// check if we have the resource
	IF !(<RESTEST <SERV.ITEMDEF.<args>.RESOURCES.<dlocal._for>.VALUE> <LOCAL.RESOURCE_NAME>>)
		RETURN 0
	ENDIF
ENDFOR
RETURN 1

// function for make the item
[FUNCTION f_makeitem]
//<args> = Item ID need to be craft
//evaluate if success or fail
if (<src.<serv.skill.<serv.itemdef.<args>.skillmake.1.key>.key>> >= <serv.itemdef.<args>.skillmake.1.val>)
   local.r = <eval (<src.<serv.skill.<serv.itemdef.<args>.skillmake.1.key>.key>> - <serv.itemdef.<args>.skillmake.1.val>) * 2>
   local.r += <def.<src.ctag0.craft.skill>_chanceatmin>
endif

// chance to success
if (<R1000> < <local.r>)
	LOCAL.SUCCESS=1
else
	LOCAL.SUCCESS=0
endif

// skillgain (maybe we can increase the chance if success)
SKILLGAIN <SERV.ITEMDEF.<args>.SKILLMAKE.1.KEY> <SERV.ITEMDEF.<args>.SKILLMAKE.1.VAL>

// consume resources
FOR 1 <SERV.ITEMDEF.<args>.RESOURCES.COUNT>
	// set the resource_name we can use to check the resource
	LOCAL.RESOURCE_NAME=<SERV.ITEMDEF.<args>.RESOURCES.<dlocal._for>.KEY.NAME>
	// if is different from base, then we need to check the resource
	IF (<def.<ctag0.craft.skill>_material_<dctag.craft.material.<ctag.craft.skill>>_resourceid> != <LOCAL.RESOURCE_NAME> )
		LOCAL.RESOURCE_NAME=<def.<ctag0.craft.skill>_material_<dctag.craft.material.<ctag.craft.skill>>_resourceid>
	ENDIF

	// consume
	LOCAL.CONSUME_QTY = <SERV.ITEMDEF.<args>.RESOURCES.<dlocal._for>.VALUE>

	// if fail consume 1
	IF (!<LOCAL.SUCCESS>)
		LOCAL.CONSUME_QTY = <LOCAL.CONSUME_QTY> / 2
		// if is less than 1, then consume 1
		IF (<LOCAL.CONSUME_QTY> < 1)
			LOCAL.CONSUME_QTY = 1
	ENDIF

	CONSUME <LOCAL.CONSUME_QTY> <LOCAL.RESOURCE_NAME>
ENDFOR

//TODO: play animation and sound

// if success, we create the item
IF (<LOCAL.SUCCESS>)
	// create the item
	SERV.NEWITEM=<args>
	NEW.BOUNCE

	ctag.craft.message = "Creating <serv.itemdef.<args>.name>..."
	ctag.craft.last.<ctag0.craft.skill> = <args>
	IF !strcmpi("Cooking","<ctag0.craft.skill>")
		timerf <eval <serv.skill.13.delay>/10>,f_craftcooking <args>,<actdiff> // Cooking Fix
	ENDIF
	LOCAL.NewLastTen=<args>
	FOR 0 9
		LOCAL.TempItem=<getargv <LOCAL._for> <TAG0.craft.lastTen.<ctag0.craft.skill>>>
		IF (<LOCAL.TempItem>) && !(STRMATCH(*<LOCAL.TempItem>*,<LOCAL.NewLastTen>))
			LOCAL.NewLastTen=<LOCAL.NewLastTen>,<LOCAL.TempItem>
		ENDIF
	ENDFOR
	TAG.craft.lastTen.<ctag0.craft.skill>=<LOCAL.NewLastTen>
ENDIF
//TODO: maybe use skillusequick
//SKILLUSEQUICK <ctag0.craft.skill> 800
ACT=<NEW>
TRIGGER @SKILLMAKEITEM


[FUNCTION f_cancraft]
IF (STRMATCH("*t_masonry_tool*","<SERV.ITEMDEF.<ARGS>.SKILLMAKE>") && !(<TAG0.crafting.masonry>))
   RETURN 0
ENDIF
IF (STRMATCH("*t_glassblowing*","<SERV.ITEMDEF.<ARGS>.SKILLMAKE>") && !(<TAG0.crafting.glassblowing>))
   RETURN 0
ENDIF
IF !(<f_canmake <ARGS>>)
   RETURN 0
ENDIF
RETURN 1

[FUNCTION f_enhancesuccesschance]
IF (<SRC.Imbuing> >= <serv.itemdef.<args>.skillmake.1.val>)
   LOCAL.R = <EVAL (<SRC.Imbuing>> - <SERV.ITEMDEF.<ARGS>.SKILLMAKE.1.VAL>) * 2>
   LOCAL.R += <DEF.<SERV.ITEMDEF.<ARGS>.SKILLMAKE.1.NAME>_CHANCEATMIN>
ENDIF
IF !(<ISITEM>)
   IF (<R1000> < <LOCAL.R>)
      ACTDIFF = 10
   ELSE
      ACTDIFF = -10
   ENDIF
   RETURN 1
ELSE
   IF <LOCAL.R> < 0
      LOCAL.R = 0
   ELIF <LOCAL.R> > 1000
      LOCAL.R = 1000
   ENDIF
   RETURN <LOCAL.R>
ENDIF

[FUNCTION f_craftsuccesschance]
if (<src.<serv.skill.<serv.itemdef.<args>.skillmake.1.key>.key>> >= <serv.itemdef.<args>.skillmake.1.val>)
   local.r = <eval (<src.<serv.skill.<serv.itemdef.<args>.skillmake.1.key>.key>> - <serv.itemdef.<args>.skillmake.1.val>) * 2>
   local.r += <def.<src.ctag0.craft.skill>_chanceatmin>
endif
if !(<isitem>)
   if (<r1000> < <local.r>)
      actdiff = 10
   else
      actdiff = -10
   endif
   return 1
else
   if <local.r> < 0
      local.r = 0
   elif <local.r> > 1000
      local.r = 1000
   endif
   return <local.r>
endif

[FUNCTION f_craft_exceptionalchance]
if !(<getargv 1 <src.ctag0.craft.item.options>>)
   return 0
endif
local.successchance = <eval (<src.<serv.skill.<serv.itemdef.<baseid>.skillmake.1.key>.key>> - <serv.itemdef.<baseid>.skillmake.1.val>) * 2>
local.successchance += <def.<src.ctag0.craft.skill>_chanceatmin>
local.r = <eval <local.successchance> - 450>

if <local.r> < 0
   local.r = 0
elif <local.r> > 1000
   local.r = 1000
endif
return <local.r>

[FUNCTION f_crafting_render_materials]
xmfhtmlgumpcolor 175 40 370 20 1044011 0 0 <ddef.dcolor_white>
local.x = 180
dorigin 180 45
while !(<isempty <def.<ctag0.craft.skill>_material_<dlocal.n>_name>>)
dtext +35 *20 0480 <def.<ctag0.craft.skill>_material_<dlocal.n>_name>
button *0 *0 4005 4007 1 0 <eval 5020 + <local.n>>
if <local.n> > 9
   local.x += 180
   dorigin <local.x> 45
endif
local.n ++
endwhile

[FUNCTION f_craft_exceptionalbonus] // ITEM.f_craft_exceptionalbonus <UID>
ref1 = <args>
if <isweapon>
	local.totalbonus = <min 40,<eval 35 + (<ref1.armslore> / 200)>>
	tag0.DamageIncrease += <local.totalbonus>
elif <isarmor>
	local.totalbonus = <min 20,<eval 15 + (<ref1.armslore> / 200)>>
	for <local.totalbonus>
		dorand 5
			tag0.ResPhysical ++
			tag0.ResFire ++
			tag0.ResCold ++
			tag0.ResEnergy ++
			tag0.ResPoison ++
		enddo
	endfor
elif <tag0.UsesRemaining>
	local.totalbonus = <min 40,<eval 35 + (<ref1.armslore> / 200)>> // FIXME: couldn't find any information on the actual formula so this is completely made up.
	tag0.UsesRemaining += <local.totalbonus>
endif

//Blacksmithing

[FUNCTION f_craft_blacksmith_checkforge]
IF ((!<ISNEARTYPE t_forge 3>) || (!<ISNEARTYPE t_anvil 3>))
   CTAG.craft.message=<DEF.SCP.craft_msg_smithingneeds>
   RETURN 1
ENDIF
RETURN 0

[FUNCTION f_craft_blacksmith_exceptionalbonus]
REF5=<ARGS>
NAME=Exceptional <NAME>
IF (<ISWEAPON>)
   tag0.damageincrease += <eval 35 + (<ref5.armslore> / 200)>
ELIF (<ISARMOR>)
   modar += <eval (<armor.high> * 15) / 100>
ENDIF


[FUNCTION f_craft_blacksmith_repair]
IF (!<ISNEARTYPE t_forge 3>) || (!<ISNEARTYPE t_anvil 3>)
   CTAG.craft.message=<DEF.SCP.craft_msg_smithrepairneeds>
   f_resenddialog d_craft_menu
   RETURN 1
ENDIF
TARGETF f_craft_blacksmith_repair_targ
SYSMESSAGE <DEF.SCP.craft_repair_targ>

//TODO: consume resource if fail to
[FUNCTION f_craft_blacksmith_repair_targ]
LOCAL.Max = <argo.more1h>
LOCAL.Res = <STRARG <ARGO.RESOURCES.1.VALUE>>
LOCAL.ResID = <STRARG <ARGO.RESOURCES.1.KEY>>
LOCAL.Total = <LOCAL.max>/<LOCAL.res>
LOCAL.ToRepair = <argo.more1h> - <argo.more1l>
LOCAL.IngotNeeded = <LOCAL.ToRepair>/<LOCAL.Total>

//override res id if exist
IF (!<ISEMPTY <ARGO.TAG.CRAFT.RESOURCE>>)
    LOCAL.ResID = <ARGO.TAG.CRAFT.RESOURCE>
ENDIF

IF (!<ISNEARTYPE t_forge 3>) || (!<ISNEARTYPE t_anvil 3>)
   CTAG.craft.message=<DEF.SCP.craft_msg_smithrepairneeds>
   LOCAL.FailedRequirement=1
// ELIF (!<ARGO.ISTEVENT.t_equipitem>)
   // CTAG.Craft.Message=<DEF.SCP.craft_repair_notitem>
   // LOCAL.FailedRequirement=1
ELIF (<ARGO.SKILLMAKE.1.KEY>!=<SRC.CTAG0.craft.skill>)
   CTAG.Craft.Message=<DEF.SCP.craft_repair_wrongskill>
   LOCAL.FailedRequirement=1
ELIF (<ARGO.CONT> != <FINDLAYER(layer_pack).UID>)
   CTAG.Craft.Message=<DEF.SCP.craft_repair_inpack>
   LOCAL.FailedRequirement=1
ELIF ((<ARGO.SKILLMAKE.1.KEY> != skill_blacksmith) || !((<ARGO.TYPE> == t_armor) || (<ARGO.TYPE> == t_shield) || (<ARGO.ISWEAPON>)))
   CTAG.Craft.Message=<DEF.SCP.craft_repair_wrongskill>
   LOCAL.FailedRequirement=1
ELIF (<ARGO.MORE1L> >= <ARGO.MORE1H>)
   CTAG.Craft.Message=<DEF.SCP.craft_repair_fullrepair>
   LOCAL.FailedRequirement=1
ELIF (<ARGO.MORE1H> <= 0)
   CTAG.Craft.Message=<DEF.SCP.craft_repair_cannot>
   LOCAL.FailedRequirement=1
ENDIF

IF (<LOCAL.FailedRequirement>)
   f_resenddialog d_craft_menu
   RETURN 1
ENDIF

IF !(<SRC.RESTEST <DLOCAL.IngotNeeded> <LOCAL.ResID>>)
	CTAG.Craft.Message=You don't have enough ingots
    f_resenddialog d_craft_menu
	RETURN 1
ENDIF

f_loopanim 11,3,1
f_loopsound 42,3,1
LOCAL.difficulty=<EVAL ((((<ARGO.MORE1H> - <ARGO.MORE1L>) * 1250) / <ARGO.MORE1H>) - 250) / 10>
LOCAL.decrease=<EVAL 30 - (<Blacksmithing> / 33)>
IF (<LOCAL.decrease> < 0)
   LOCAL.decrease=0
ENDIF
//LOCAL.decrease += <EVAL {2 4}>
ARGO.MORE1H=<EVAL (<ARGO.MORE1H> * (100 - <LOCAL.decrease>)) / 100>
IF (<LOCAL.difficulty> > <R100>)
   CTAG.craft.message=<DEF.SCP.craft_repair_fail>
   f_resenddialog d_craft_menu
   RETURN 1
ELSE
   ARGO.MORE1L=<ARGO.MORE1H>
   CTAG.craft.message=<DEF.SCP.craft_repair_success>
   SRC.CONSUME <DLOCAL.IngotNeeded> <LOCAL.ResID>
   f_resenddialog d_craft_menu
ENDIF
RESENDTOOLTIP


[FUNCTION f_craft_blacksmith_smelt]
IF (!<ISNEARTYPE t_forge 3>)
   CTAG.craft.message=<DEF.SCP.craft_msg_smithsmeltneeds>
   f_resenddialog d_craft_menu
   RETURN 1
ENDIF
TARGETF f_craft_blacksmith_smelt_targ
SYSMESSAGE <DEF.SCP.craft_smelt_targ>

[FUNCTION f_craft_blacksmith_smelt_targ]
IF (<ARGO.TOPOBJ> != <SRC>)
   src.sysmessage <def.scp.craft_smelt_notinpack>
	return 1
ELIF (!<ISNEARTYPE t_forge 3>)
   CTAG.craft.message=<DEF.SCP.craft_msg_smithsmeltneeds>
   RETURN 1
ELIF !<ARGO.ISITEM>
   SYSMESSAGE <DEF.SCP.craft_smelt_notitem>
   RETURN 1
ELIF (<ARGO.TYPE>==t_ore)
    dclick <argo.uid>
    RETURN 1
ELIF (<ARGO.TYPE>==t_clothing) || (<ARGO.ATTR>&attr_magic) || !((<ARGO.ISARMOR>) || (<ARGO.ISWEAPON>) || STRMATCH("*ingot*","<ARGO.RESOURCES.1>"))
   SYSMESSAGE <DEF.SCP.craft_smelt_notsmeltable>
   RETURN 1
ELSE
    LOCAL.RESOURCE = <ARGO.RESOURCES.1.KEY>
    //check if exist TAG.CRAFT.RESOURCE and change the resource if exist
    IF (!<ISEMPTY <ARGO.TAG.CRAFT.RESOURCE>>)
        LOCAL.RESOURCE = <ARGO.TAG.CRAFT.RESOURCE>
    ENDIF
    LOCAL.AMOUNT=<MULDIV <STRARG <ARGO.RESOURCES.1>>,60,100>
    SERV.NEWITEM=<LOCAL.RESOURCE>,<dLOCAL.AMOUNT>
    NEW.CONT=<ARGO.CONT>
    ARGO.REMOVE
    SYSMESSAGE <DEF.SCP.craft_smelt_success>
    src.f_fireforge
    f_resenddialog d_craft_menu
ENDIF

[FUNCTION f_craft_cooking_checkfire]
if (<serv.itemdef.<STREAT <serv.itemdef.<args>.resources>>.type> == t_meat_raw) || (<serv.itemdef.<STREAT <serv.itemdef.<args>.resources>>.type> == t_food_raw)
   IF !((<ISNEARTYPE t_fire 3>) || (<ISNEARTYPE t_forge 3>) || (<ISNEARTYPE t_campfire 3>))
      CTAG.craft.message=<DEF.cooking_check_notice>
      RETURN 1
   ENDIF
endif
RETURN 0

[FUNCTION f_check_recipe] //Verification if player have the recipe of the item
//Parameter: ARGS is the ID of the item  ex i_potion_refresh
//Return 1 mean fabrication can't be DONE
if <tag0.recipe.<ARGS>>
   return 0
else
   return 1
endif


[EOF]
