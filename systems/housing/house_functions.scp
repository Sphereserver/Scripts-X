//****************************************************************************
// SphereServer by: SphereServer development team and Menasoft.
// www.sphereserver.net
//****************************************************************************
VERSION=X1

[FUNCTION f_house_timer_reset_all]
local.p <src.p>
for 0 254
	if (<serv.maplist.<dlocal._for>>)
		src.p=0,0,0,<dlocal._for>
		serv.log processing map <dlocal._for>
  		src.f_house_timer_activate
 	endif
endfor
src.p <local.p>

[FUNCTION f_house_placement]
SERV.NEWITEM i_gold
NEW.TYPE=t_deed
NEW.MORE1=<ARGS>
NEW.CONT <SRC.FINDLAYER.21>
NEW.REMOVEFROMVIEW
NEW.USE

[FUNCTION f_house_isPlaced]
SERV.NEWITEM i_gold
NEW.P <STREAT <STREAT <ARGS>>>
NEW.REMOVEFROMVIEW
REF1=<NEW.REGION.UID>
IF (<REF1.DISPID>==<STRARG <ARGS>>)
 REF1.TAG.PLACEMENT=<STRARG <STREAT <ARGS>>>
ENDIF
NEW.REMOVE

[FUNCTION f_house_timer_activate]
foritems 7168
	if (<type>==t_multi) || (<type>==t_multi_custom)
		ref1 <region.link>
		ref1.timer=60*60*24*<def.hs_can_decay>
	endif
endfor

[FUNCTION f_house_can_access]
ref1 = <region.uid>
if (<tag0.access>==<def.house_access_all> || <src.IsGM>)
    return 1
endif
local.AccessLevel = <ref1.f_house_get_priv <src>>
if (<tag0.access>==<def.house_access_friend>)
    if (<local.AccessLevel> <= <def.house_access_friend>)
        return 1
    endif
elseif (<tag0.access>==<def.house_access_coowner>)
    if (<local.AccessLevel> <= <def.house_access_coowner>)
        return 1
    endif
elseif (<tag0.access>==<def.house_access_owner>)
    if (<local.AccessLevel> == <def.house_access_owner>)
        return 1
    endif
elseif (<tag0.access>==<def.house_access_guild>)
    if ((<local.AccessLevel> == <def.house_access_guild>))
        return 1
    endif
endif
return 0

[FUNCTION f_house_get_priv]
if (<IsOwner <src>>)
    return <def.house_access_owner>
elseif (<getCoownerpos <src>> >= 0)
    return <def.house_access_coowner>
elseif (<getFriendpos <src>> >= 0)
    return <def.house_access_friend>
elseif (<owner.guild>)
    if(<owner.guild> == <src.guild>)
        local.priv=<src.guild.memberfromuid.<src>.priv>
        if ((<local.priv>==1) || (<local.priv>==2)) // 1 = member, 2 = master
            return <def.house_access_guild>
        endif
    endif
endif
return <def.house_access_none>

[FUNCTION f_house_render_list]
ref1 = <owner>
local.list = <argv[0]>
dtext 125 130 07f9 <local.list> List
dtext 230 140 07f9 <<local.list><qval (strmatch(*access*,<local.list>))?es:s>> / 10
if (strmatch(*ban*,<local.list>))
	local.fontcolor = 32
elif (strmatch(*access*,<local.list>))
	local.fontcolor =  367
else
	local.fontcolor = 07f9
endif
local.y=170
if <<local.list><qval (strmatch(*access*,<local.list>))?es:s>>
	for  0 <eval <<local.list><qval (strmatch(*access*,<local.list>))?es:s>>-1>
		if (<local._for> < 11)
			local.txt = 57
			local.btn = 7
		else
			local.txt = 250
			local.btn = 200
		endif
		if (<local._for>==11)
			local.y=170
		endif
		if ((<isowner <src>>) || (<get<local.list>pos <src>> >= 0) || (<src.isgm>)) && ((strmatch(*coowner*,<local.list>)) || (strmatch(*friend*,<local.list>)))
			if (<<local.list>.<local._for>>==<src.uid>) || (<isowner <src>>) || (<src.isgm>)
				dtext 57 <local.y> <local.fontcolor> <<local.list>.<local._for>.name>
				if <argv[1]>
					button 7 <local.y> 4017 4018 1 0 <eval (100+<local._for>)>
				endif
			else
				dtext 57 <local.y> <local.fontcolor> <<local.list>.<local._for>.name>
			endif
		elif ((<isowner <src>>) || (<GetCoownerPos <src>> >= 0) || (<src.isgm>)) && ((strmatch(*friend*,<local.list>)) || (strmatch(*access*,<local.list>)) ||(strmatch(*ban*,<local.list>)))
			dtext 57 <local.y> <local.fontcolor> <<local.list>.<local._for>.name>
			serv.log a
			if <argv[1]>
				button 7 <local.y> 4017 4018 1 0 <eval (100+<local._for>)>
			endif
		endif
	local.y += 20
	endfor
endif

[FUNCTION f_house_render_signs]
local.y=157
local.btn1 = 7
local.btn2 = 37
local.sign=2979
buttontileart 7 132 07588 07588  1 0 2965 2965 0 -10 -5
buttontileart 37 132 07588 07588 1 0 2966 2966 0 -10 -5
for 1 112
	if (<local.y> > 360)
		local.y=132
		local.btn1 += 60
		local.btn2 += 60
	endif
	buttontileart <local.btn1> <local.y> 07588 07588 1 0 <local.sign> <local.sign> 0 -10 -5
	local.sign +=1
	buttontileart <local.btn2> <local.y> 07588 07588 1 0 <local.sign> <local.sign> 0 -10 -5
	local.sign +=1
	local._for +=1
	local.y += 25
	if (<dlocal.sign> == 3087)
		local.sign = 3139
	elif (<dlocal.sign> > 3140)
		return
	endif
endfor

[FUNCTION f_house_add_list]
ref1= <region.uid>
ref2 = <argo>
if <ref2.isplayer>
	if (<ref2>==<src>)
		src.sysmessage @32,,1 You cannot add yourself to the <local.list> list.
		return 1
	endif
	if (<ref1.isowner <ref2>>)
		src.sysmessage @32,,1 <ref2.name> is the owner of this property.
		return 1
	elif (<ref1.GetCoownerPos <ref2>> >= 0)
		src.sysmessage @32,,1 <ref2.name> is a co-owner of this property.
		src.sysmessage @32,,1 remove them from this list before adding them to another.
		return 1
	elif (<ref1.GetFriendPos <ref2>> >= 0)
		src.sysmessage @32,,1 <ref2.name> is a friend of this property.
		src.sysmessage @32,,1 remove them from this list before adding them to another.
		return 1
	elif (<ref1.GetAccessPos <ref2>> >= 0)
		src.sysmessage @32,,1 <ref2.name> is on the access list.
		src.sysmessage @32,,1 remove them from this list before adding them to another.
		return 1
	elif (<ref1.GetBanPos <ref2>> >= 0)
		src.sysmessage @32,,1 <ref2.name> is on the bans list.
		src.sysmessage @32,,1 remove them from this list before adding them to another.
		return 1
	elseif <argn> == 1
		if <ref1.Coowners> <= <ddef.hs_max_co_owners>
			ref1.AddCoowner=<ref2>
			src.sysmessage @,,1 <ref2.name> has been added as a Co-Owner for this property.
			ref2.sysmessage @,,1 You have been made a Co-Owner for this property.
			return 1
		else
			src.sysmessage @32,,1 You already have the maximum number of Co-Owners permitted for this property. (<ddef.hs_max_co_owners>)
			src.sysmessage @32,,1 Remove someone from the list and try again.
			return 1
		endif
	elseif <argn> == 2
		if <ref1.Friends> <= <ddef.hs_max_friends>
			ref1.AddFriend=<ref2>
			src.sysmessage @,,1 <ref2.name> has been added as a Friend for this property.
			ref2.sysmessage @,,1 You have been made a Friend for this property.
			return 1
		else
			src.sysmessage @32,,1 You already have the maximum number of Friends permitted for this property. (<ddef.hs_max_friends>)
			src.sysmessage @32,,1 Remove someone from the list and try again.
			return 1
		endif
	elseif <argn> == 3
		if <ref1.Bans> <= 10
			ref1.AddBan=<ref2>
			src.sysmessage @32,,1 <ref2.name> has been banned from the property.
			ref2.sysmessage @32,,1 You have been banned from this property.
			ref2.go <link.p>
			return 1
		else
			src.sysmessage @32,,1 Your Ban list is full.
			src.sysmessage @32,,1 Remove someone from the list and try again.
			return 1
		endif
	elseif <argn> == 4
		if <ref1.Accesses> <= 10
			ref1.AddAccess=<ref2>
			src.sysmessage @367,,1 <ref2.name> has been granted access to the property.
			ref2.sysmessage @367,,1 You have been granted access to the property.
			return 1
		else
			src.sysmessage @32,,1 Your Access list is full.
			src.sysmessage @32,,1 Remove someone from the list and try again.
			return 1
		endif
	endif
endif

[FUNCTION f_house_open]
args = <multiregion>
foritems <eval (<argv[2]>+<argv[3]>)>
	if (<type>==t_door) || (<type>==t_door_locked) || (<type>==t_telepad)
		ref1=<uid>
		if <ref1.tag0.access>
			ref1.tag.access=
		endif
	endif
endfor
delban -1
delaccess -1
delcoowner -1
delfriend -1

[FUNCTION f_house_hs_buy_storage]
ref1=<link>
local.value = <args>
if (<tag0.demolition>)
	src.sysmessage @32,,1 This house is scheduled for demolition and cannot be upgraded.
	return 1
endif
if (<src.gold> >= <dlocal.value>)
	src.gold -= <dlocal.value>
	tag0.boughtstorage += <dlocal.value>
	if (<dlocal.value>==<QVAL (<value>)? <eval (<value>/8)>:<eval (<tag0.value>8)>>)
		local.storage=25
	elif (<dlocal.value>==<QVAL (<value>)? <eval <value>/4>:<eval <tag0.value>/4>>)
		local.storage=50
	elif (<dlocal.value>==<QVAL (<value>)? <eval ((<value>/8)*3)>:<eval ((<tag0.value>/8)*3)>>)
		local.storage=75
	else
		local.storage=100
	endif
	IncreasedStorage += <dlocal.storage>
	src.sysmessage @,,1 <dlocal.value> gp has been deducted from your bank to pay for this upgrade.
else
	src.sysmessage @32,,1 You do not have the funds to pay for this storage upgrade.
	return 1
endif

[FUNCTION f_house_item_lock]
ref1=<region.uid>
if !(<ref1.IsOwner <uid>> || (<ref1.GetCoownerPos <uid>> >= 0) || (<ref1.GetFriendPos <uid>> >= 0) || <IsGM>) // Double check to prevent players to get the target on their house and use it on another.
    return
endif
if <def.hs_hs_secure_locks_limit>
	if <ref1.currentstorage> >= <ref1.maxstorage>
		sysmessage @32,,1 Your house reached its storage limit.
		return
	endif
endif
if (<argo.isitem> && <argo.region.uid>==<ref1>)
	ref1.lockitem <argo>
	if ((<argo.attr>&attr_decay) && (<argo.timer> >= 0))
		argo.tag.decay=1
		argo.timer -1
		argo.attr &= ~attr_decay
		if (<ref1.GetFriendPos <uid>> >= 0)
			argo.tag.lockedby <uid>
		endif
	endif
endif

[FUNCTION f_house_item_unlock]
ref1=<region.uid>
if !(<ref1.IsOwner <uid>> || (<ref1.GetCoownerPos <uid>> >= 0) || (<ref1.GetFriendPos <uid>> >= 0) || <IsGM>) // Double check to prevent players to get the target on their house and use it on another.
    return
endif
if (<ref1.GetSecuredContainerPos <argo>> = 0) && ((<ref1.IsOwner <uid>>) || (<IsGM>))
	ref1.release <argo>
elif (<argo.isitem> && <argo.region.uid>==<ref1>)
	if (<ref1.GetFriendPos <uid>> >= 0) && (<argo.tag0.lockedby> != <uid>)
		sysmessage @32,,1 Friends can only unlock items if they are locked them.
		return
	endif
	ref1.unlockitem <argo>
	tag0.lockedby
endif
if (<argo.tag0.decay>)
		argo.tag.decay
		argo.timer <eval <serv.DecayTimer>*60>
		argo.attr |= attr_decay
endif

[FUNCTION f_house_item_secure]
ref1=<region.uid>
if !(<ref1.IsOwner <uid>> || (<ref1.GetCoownerPos <uid>> >= 0) || <IsGM>) // Double check to prevent players to get the target on their house and use it on another.
	sysmessage @32,,1 Only owner and co-owner can secure items.
    return
endif
if <def.hs_hs_secure_locks_limit>
	if (<ref1.currentstorage> >= <ref1.maxstorage>) || (<eval <argo.count>+1> >= <ref1.maxstorage>)
		sysmessage @32,,1 Your house reached its storage limit.
		return
	endif
endif
if (<argo.isitem> && <argo.region.uid>==<ref1>)
	if (<argo.f_isContainer>)
		ref1.secure <argo>
		if ((<argo.attr>&attr_decay) && (<argo.timer> >= 0))
			argo.tag.decay=1
			argo.timer -1
			argo.attr &= ~attr_decay
		endif
	else
		sysmessage @32,,1 You can only secure containers.
	endif
endif


[FUNCTION f_d_house_secure]
ref1= <argo.region.uid>
if <src> == <ref1.owner>
	if (<argo.type>==t_door) || (<argo.type>==t_door_locked) || (<argo.type>==t_telepad)
		if <argo.isevent.ei_house_door> || <argo.isevent.ei_house_telepad>
			dialogclose d_house_secure
			argo.sdialog d_house_secure
		endif
	elif (<argo.f_isContainer>)
		if <argo.isevent.t_house_secure>
			dialogclose d_house_secure
			argo.sdialog d_house_secure
		else
			src.sysmessage @32,,1 You can only modify containers which are secured.
			return 1
		endif
	endif
else
	src.sysmessage @32,,1 You can only modify items which are in your house.
	return 1
endif

[FUNCTION f_house_eject]
ref1=<src.region.uid>
ref2=<argo.region.uid>
if <argo.isplayer>
	if !<argo.isgm>
		if (<ref1>==<ref2>)
			if (<argo>==<src>)
				src.sysmessage @32,,1 You cannot eject yourself from this property.
				return 1
			endif
			if (<argo.is_owner>) || (<argo.is_coowner>) || (<argo.is_friend>)
				src.sysmessage @32,,1 You cannot eject this person
			else
				argo.go <uid.<ref1.link>.p>
			endif
		else
			src.sysmessage @32,,1 That person is not in your house
			return 1
		endif
	else
		src.sysmessage @32,,1 You cannot eject staff from your house
		return 1
	endif
endif

[FUNCTION f_house_declare_guild]
if (<argo.ischar>) || (<argo.topobj.ischar>)
	src.sysmessage @32,,1 That is not allowed
	return 1
endif
if (<argo.type>!=t_stone_guild)
	src.sysmessage @32,,1 That is not allowed
	return 1
endif
if (<argo.type>==t_stone_guild) && (<argo.region.uid>==<src.region.uid>)
	ref1.tag0.is_guild=<argo.uid>
	ref1.resendtooltip
	src.sysmessage @,,1 All <uid.<argo.uid>.name> guild members now have access to this building.
	src.sysmessage @,,1 Don't forget to set your door codes if areas are/need to be restricted.
endif

[FUNCTION f_house_moven]
ref1=<src.region.uid>
if (<argo.uid>==<src.uid>) || (<argo.isplayer>)
	src.sysmessage @32,,1 You cannot move that.
	return 1
elif (<argo.link>==<ref1>)
	src.sysmessage @32,,1 You cannot move that.
	return 1
endif
if (<argo.topobj.ischar>)
	src.sysmessage @32,,1 That would be hillarious... but I am afraid we can't allow it.
	return 1
endif
ref8=<argo>
if (<ref8.region.uid> == <src.region.uid>)
	ref8.move 0,-1,0
	ref8.update
	return 1
else
	src.sysmessage @32,,1 You cannot move this any further.
	return 1
endif

[FUNCTION f_house_moves]
ref1=<src.region.uid>
if (<argo.uid>==<src.uid>) || (<argo.isplayer>)
	src.sysmessage @32,,1 You cannot move that.
	return 1
elif (<argo.link>==<ref1>)
	src.sysmessage @32,,1 You cannot move that.
	return 1
endif
if (<argo.topobj.ischar>)
	src.sysmessage @32,,1 That would be hillarious... but I am afraid we can't allow it.
	return 1
endif
ref8=<argo>
if (<ref8.region.uid> == <src.region.uid>)
	ref8.move 0,1,0
	ref8.update
	return 1
else
	src.sysmessage @32,,1 You cannot move this any further.
	return 1
endif

[FUNCTION f_house_movee]
ref1=<src.region.uid>
if (<argo.uid>==<src.uid>) || (<argo.isplayer>)
	src.sysmessage @32,,1 You cannot move that.
	return 1
elif (<argo.link>==<ref1>)
	src.sysmessage @32,,1 You cannot move that.
	return 1
endif
if (<argo.topobj.ischar>)
	src.sysmessage @32,,1 That would be hillarious... but I am afraid we can't allow it.
	return 1
endif
ref8=<argo>
if (<ref8.region.uid> == <src.region.uid>)
	ref8.move 1,0,0
	ref8.update
	return 1
else
	src.sysmessage @32,,1 You cannot move this any further.
	return 1
endif

[FUNCTION f_house_movew]
ref1=<src.region.uid>
if (<argo.uid>==<src.uid>) || (<argo.isplayer>)
	src.sysmessage @32,,1 You cannot move that.
	return 1
elif (<argo.link>==<ref1>)
	src.sysmessage @32,,1 You cannot move that.
	return 1
endif
if (<argo.topobj.ischar>)
	src.sysmessage @32,,1 That would be hillarious... but I am afraid we can't allow it.
	return 1
endif
ref8=<argo>
if (<ref8.region.uid> == <src.region.uid>)
	ref8.move -1,0,0
	ref8.update
	return 1
else
	src.sysmessage @32,,1 You cannot move this any further.
	return 1
endif

[FUNCTION f_house_flip] // unused function?
ref1=<src.region.uid>
if (<argo.uid>==<src.uid>) || (<argo.isplayer>)
	src.sysmessage @32,,1 You cannot flip that.
	return 1
elif (<argo.link>==<ref1>)
	src.sysmessage @32,,1 You cannot flip that.
	return 1
endif
if (<argo.topobj.ischar>)
	src.sysmessage @32,,1 That would be hillarious... but I am afraid we can't allow it.
	return 1
endif
ref8=<argo>
ref8.flip
return 1

[FUNCTION f_house_visitor_count]
ref1 = <region.uid>
if !<src.isgm>
	uid.<ref1.link>.more2 +=1
endif

[FUNCTION f_house_transfer]
if !(<ARGO.ISPLAYER>)
	SRC.SYSMESSAGE @,,1 Only players can have house !
	return 1
endif
REF1=<ARGS>
if (<ARGO>==<SRC>)
	SRC.SYSMESSAGE @,,1 You can't trade house to yourself !
	return 1
endif
if !(<argo.houses> < <serv.MaxHousesAccount>)
	SRC.SYSMESSAGE @,,1 <ARGO.NAME> already own the maximum number of houses permitable : <serv.MaxHousesAccount>
	return 1
endif
SRC.SYSMESSAGE @,,1 Please wait until <argo.name> accept the trade.
if (<FINDTYPE.t_eq_trade_window>)
	SYSMESSAGE @,,1 Baska birisine evi transfer etmeye calisirken bir baskasina da transfer edemezsınız. //FIXME: translate to english!
	return 1
elif (<SRC.FINDTYPE.t_eq_trade_window>)
	SRC.SYSMESSAGE @,,1 Baska birisine evi transfer etmeye calisirken bir baskasina da transfer edemezsınız. //FIXME: translate to english!
	return 1
endif
SRC.EVENTS=+e_house_transfer
argo.EVENTS=+e_house_transfer
SERV.NEWITEM i_deed
NEW.ATTR=attr_move_never
NEW.COLOR=0480
NEW.LINK=<REF1>
NEW.MORE1=<argo>
NEW.TYPE=t_trade_house_deed
NEW.TIMERF 2,TRIGGER @Timer
SRC.TRYSRC <argo> f_TradeWindow <NEW>

[FUNCTION f_TradeWindow] //Credits to Terrikate for provide the function engine
REF1=<uid>
REF2=<src>
REF3=<ARGS>
if (<REF1>==<REF2>) || !((<REF1.ISPLAYER>) && (<REF2.ISPLAYER>))
	return 1
endif
for 2
	SERV.NEWITEM i_bulletin_board
	LOCAL.TRADE_WINDOW_<dLOCAL._FOR>=<NEW>
	NEW.TYPE t_eq_trade_window
	REF<LOCAL._FOR>.EQUIP <NEW>
endfor
UID.<LOCAL.TRADE_WINDOW_1>.LINK=<LOCAL.TRADE_WINDOW_2>
UID.<LOCAL.TRADE_WINDOW_2>.LINK=<LOCAL.TRADE_WINDOW_1>
REF1.SENDPACKET 06F W02F B0 D<REF2> D<LOCAL.TRADE_WINDOW_1> D<LOCAL.TRADE_WINDOW_2> 01 <f_TradeWindow_PacketSplit <REF2.NAME>>
REF2.SENDPACKET 06F W02F B0 D<REF1> D<LOCAL.TRADE_WINDOW_2> D<LOCAL.TRADE_WINDOW_1> 01 <f_TradeWindow_PacketSplit <REF1.NAME>>
if (<REF3>)
	REF3.CONT=<LOCAL.TRADE_WINDOW_1>
endif

[FUNCTION f_TradeWindow_PacketSplit]
LOCAL.LENGTH=<eval STRLEN(<ARGS>)>
ARGS=<ASC <ARGS>>
for <eval (30-<LOCAL.LENGTH>)>
	ARGS .= " 00"
endfor
return <ARGS>

[FUNCTION f_house_swap]
ref2=<owner>
if (<baseid>==m_tower)
	local.xy=16x14
else
	args = <multiregion>
	local.left=<argv[0]>
	local.top=<argv[1]>
	local.right=<argv[2]>
	local.bottom= <argv[3]>
	local.x <eval (<local.bottom> - <local.top>) + 1>
	local.y <eval (<local.right> - <local.left>) + 1>
    local.x /= 2
    local.y /= 2
    local.x=<eval max 7,<local.x>>
    local.y=<eval max 7,<local.y>>
    local.x=<eval min 18,<local.x>>
    local.y=<eval min 18,<local.y>>
	local.xy <dlocal.x>x<dlocal.y>
endif
forchars <eval (((<argv[2]>+<argv[3]>)/2)+2)>
	if (<region.uid>==<uid>)
		if (strmatch(<obody>,<def.vendor_body_male>)) || (strmatch(<obody>,<def.vendor_body_female>))
			src.sysmessage @32,,1 Warning! There are vendors in the building.
			src.sysmessage @32,,1 To continue, remove them and select convert again.
			return 1
		endif
	endif
endfor
if (<eval <value>+<increasedstorage>> < <serv.multidef.m_foundation_<local.xy>.value>)
	local.extra=<serv.multidef.m_foundation_<local.xy>.value>-<eval (<value>+<tag0.boughtstorage>)>>
	if (<ref2.gold> >= <dlocal.extra>)
		ref2.gold -= <dlocal.extra>
		ref2.sysmessage @,,1 <dlocal.extra> gp has been deducted from your bank for this conversion.
		local.p=<p>
		local.buildon=<tag0.buildon>
		local.transfer=<tag0.lasttransfer>
		remove
		serv.newitem m_foundation_<local.xy>
		new.p <local.p>
		new.multicreate
		new.owner <ref2>
		new.tag0.convert=1
		new.tag.buildon=<local.buildon>
		new.tag.lasttransfer=<local.transfer>
		ref2.sysmessage @,,1 The number of houses you own is now <ref2.houses>
	else
		src.sysmessage @32,,1 You lack the funds to convert this house.
		return 1
	endif
else
	local.total=<eval ((<value>+<tag0.boughtstorage>)-<serv.multidef.m_foundation_<local.xy>.value>)>
	ref2.gold += <dlocal.total>
	ref2.sysmessage @,,1 You have been refunded the difference of <dlocal.total>gp for this conversion.
	local.p=<p>
	local.buildon=<tag0.buildon>
	local.transfer=<tag0.lasttransfer>
	remove
	serv.newitem m_foundation_<local.xy>
	new.p <local.p>
	new.multicreate
	new.owner <ref2>
	new.tag0.convert=1
	new.tag.buildon=<local.buildon>
	new.tag.lasttransfer=<local.transfer>
	ref2.sysmessage @,,1 The number of houses you own is now <ref2.houses>
endif

[FUNCTION f_house_isInside]
ref1 = <region.uid>
if ((<ref1.TYPE>==t_multi) || (<ref1.TYPE>==t_multi_custom))
	return 1
endif
return 0

[FUNCTION f_house_checkPlacement]
REF1=<LINK.owner>//Owner
if !<ref1.uid>
	return 1
endif
if <def.custom_placement>
	if (<f_house_checkNearArea>)
		REF1.SYSMESSAGE @,,1 Bu alana evi kuramassınız.. // FIXME: translate to english!
		if !(<REF1.ISGM>)
			link.redeed
			return 1
		endif
	endif
endif
trysrc <ref1> DIALOG d_house_placement

//////////////////////////////////////////////////////////////////////////////////////////Custom Placement check////////////////////////////////////////////////////////////////////////////////////
[FUNCTION f_house_checkNearArea]
return 0
ref1= <region.uid>
ARGS=<ref1.MULTIREGION>
SERV.NEWNPC c_pig
NEW.FLAGS=statf_invul|statf_insubstantial

for 0 7
	NEW.P=<ref1.P>
	doswitch <LOCAL._FOR>
		NEW.MOVE <ARGV0> <ARGV1>
		NEW.MOVE 0 <ARGV1>
		NEW.MOVE <ARGV2> <ARGV1>
		NEW.MOVE <ARGV2> 0
		NEW.MOVE <ARGV2> <ARGV3>
		NEW.MOVE 0 <ARGV3>
		NEW.MOVE <ARGV0> <ARGV3>
		NEW.MOVE <ARGV0> 0
	enddo
	doswitch <LOCAL._FOR>
		LOCAL.CLEAR=<NEW.CANMOVE nw>
		LOCAL.CLEAR=<NEW.CANMOVE n>
		LOCAL.CLEAR=<NEW.CANMOVE ne>
		LOCAL.CLEAR=<NEW.CANMOVE e>
		LOCAL.CLEAR=<NEW.CANMOVE se>
		LOCAL.CLEAR=<NEW.CANMOVE s>
		LOCAL.CLEAR=<NEW.CANMOVE sw>
		LOCAL.CLEAR=<NEW.CANMOVE w>
	enddo
	if (<NEW.f_isOnRoad>) || !(<LOCAL.CLEAR>)
		NEW.REMOVE
		return 1
	endif
endfor

for 0 7
	NEW.P=<UID.<REGION.UID>.P>
	doswitch <LOCAL._FOR>
		NEW.MOVE <eval <ARGV0>+1> <eval <ARGV1>+1>
		NEW.MOVE 0 <eval <ARGV1>+1>
		NEW.MOVE <eval <ARGV2>-1> <eval <ARGV1>+1>
		NEW.MOVE <eval <ARGV2>-1> 0
		NEW.MOVE <eval <ARGV2>-1> <eval <ARGV3>-1>
		NEW.MOVE 0 <eval <ARGV3>-1>
		NEW.MOVE <eval <ARGV0>+1> <eval <ARGV3>-1>
		NEW.MOVE <eval <ARGV0>+1> 0
	enddo
	if (<NEW.ISNEARTYPE t_tree 2>)
		NEW.REMOVE
		return 1
	endif
endfor

	LOCAL.AREA=3 //<DEF.hs_PlaceMinDistArea>
	for 0 7
		NEW.P=<UID.<REGION.UID>.P>
		doswitch <LOCAL._FOR>
			NEW.MOVE <eval <ARGV0>+(<LOCAL.AREA>*-1)> <eval <ARGV1>+(<LOCAL.AREA>*-1)>
			NEW.MOVE 0 <eval <ARGV1>+(<LOCAL.AREA>*-1)>
			NEW.MOVE <eval <ARGV2>+<LOCAL.AREA>> <eval <ARGV1>+(<LOCAL.AREA>*-1)>
			NEW.MOVE <eval <ARGV2>+<LOCAL.AREA>> 0
			NEW.MOVE <eval <ARGV2>+<LOCAL.AREA>> <eval <ARGV3>+<LOCAL.AREA>>
			NEW.MOVE 0 <eval <ARGV3>+<LOCAL.AREA>>
			NEW.MOVE <eval <ARGV0>+(<LOCAL.AREA>*-1)> <eval <ARGV3>+<LOCAL.AREA>>
			NEW.MOVE <eval <ARGV0>+(<LOCAL.AREA>*-1)> 0
		enddo
		if STRMATCH("t_multi*","<UID.<NEW.REGION.UID>.TYPE>")
			NEW.REMOVE
			return 2
		endif
	endfor
	LOCAL.FRONT=<DEF.hs_PlaceMinDistFront>
	for 0 5
		NEW.P=<UID.<REGION.UID>.P>
		doswitch <LOCAL._FOR>
			NEW.MOVE <ARGV2> <eval <ARGV3>+<LOCAL.FRONT>>
			NEW.MOVE 0 <eval <ARGV3>+<LOCAL.FRONT>>
			NEW.MOVE <ARGV0> <eval <ARGV3>+<LOCAL.FRONT>>
			NEW.MOVE <ARGV0> <eval <ARGV1>+(<LOCAL.FRONT>*-1)>
			NEW.MOVE 0 <eval <ARGV1>+(<LOCAL.FRONT>*-1)>
			NEW.MOVE <ARGV2> <eval <ARGV1>+(<LOCAL.FRONT>*-1)>
		enddo
		if STRMATCH("t_multi*","<UID.<NEW.REGION.UID>.TYPE>")
			NEW.REMOVE
			return 3
		endif
	endfor
NEW.REMOVE
return 0


[FUNCTION f_isOnRoad]
LOCAL.TERRAIN=<SERV.MAP(<P.X>,<P.Y>,<P.M>).TERRAIN>
if (<LOCAL.TERRAIN> >= 113) && (<LOCAL.TERRAIN> <= 140)
	return 1
elif (<LOCAL.TERRAIN> >= 232) && (<LOCAL.TERRAIN> <= 235)
	return 1
elif (<LOCAL.TERRAIN> >= 332) && (<LOCAL.TERRAIN> <= 335)
	return 1
elif (<LOCAL.TERRAIN> >= 353) && (<LOCAL.TERRAIN> <= 372)
	return 1
elif (<LOCAL.TERRAIN> >= 496) && (<LOCAL.TERRAIN> <= 499)
	return 1
elif (<LOCAL.TERRAIN> >= 622) && (<LOCAL.TERRAIN> <= 633)
	return 1
elif (<LOCAL.TERRAIN> >= 638) && (<LOCAL.TERRAIN> <= 641)
	return 1
elif (<LOCAL.TERRAIN> >= 804) && (<LOCAL.TERRAIN> <= 940)
	return 1
elif (<LOCAL.TERRAIN> >= 1351) && (<LOCAL.TERRAIN> <= 1366)
	return 1
elif (<LOCAL.TERRAIN> >= 1431) && (<LOCAL.TERRAIN> <= 1446)
	return 1
elif (<LOCAL.TERRAIN> >= 1966) && (<LOCAL.TERRAIN> <= 1969)
	return 1
elif (<LOCAL.TERRAIN> >= 1090) && (<LOCAL.TERRAIN> <= 1145)	// Sand stones
	return 1
elif (<LOCAL.TERRAIN> >= 1281) && (<LOCAL.TERRAIN> <= 1296)	// Sand stones
	return 1
elif (<LOCAL.TERRAIN> >= 9) && (<LOCAL.TERRAIN> <= 21)		// Furrows
	return 1
elif (<LOCAL.TERRAIN> >= 336) && (<LOCAL.TERRAIN> <= 348)	// Furrows
	return 1
else
	return 0
endif

[FUNCTION f_house_floor]
serv.log <args> ---- <eval <SERV.MAP(<P.X>,<P.Y>,<P.M>).TERRAIN.Z>+5> ---- <SERV.MAP(<P.X>,<P.Y>,<P.M>).TERRAIN.Z> ---- <eval 1+(<ARGS>-<eval <SERV.MAP(<P.X>,<P.Y>,<P.M>).TERRAIN.Z>+5>)/20>
LOCAL.TERRAIN=<eval <SERV.MAP(<P.X>,<P.Y>,<P.M>).TERRAIN.Z>+7>
if (<ARGS> > <LOCAL.TERRAIN>)
	return <eval 1+(<ARGS>-<LOCAL.TERRAIN>)/20>
endif
return 0

[FUNCTION f_multi_onplacement_check]
//local values = west, north, east, south
local.check_blockradius=-1,-1,1,1
local.check_multiradius=0,-5,0,5

if (<def.hs_placement_check_roads>)
    args=<serv.itemdef.<local.id>.multiregion>
    local.left=<argv0>
    local.top=<argv1>
    local.max_x=<eval -<local.left> + <argv2>>
    local.max_y=<eval -<local.top> + <argv3>>
    serv.newnpc=c_man_invisible
    new.flags |= statf_invisible
    new.p=<local.p>
    new.move <local.left>,<local.top>

    for py 1 <local.max_y>
        for px 1 <local.max_x>
            if (<new.f_isOnRoad>)
                new.remove
                return 1
            endif
            new.move 1
        endfor
        new.move -<local.max_x> 1
    endfor
    new.remove
endif

[EOF]
